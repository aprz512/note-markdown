package com.aprz.decorator;

/**
 * 煎饼
 * 
 * @author aprz
 * 
 *         把这个类写成抽象的是因为煎饼可以加各种配料： 鸡蛋 火腿肠 培根 辣条 等等
 *         煎饼在不知道要加什么配料的情况下，是无法计算出价格的
 *         
 *         因为配料较多，并且以后可能添加新的配料，以及客人可能一种配料要多份，所以将
 *         配料写在这个类中是不合适的，以后会经常需要改代码，所以采用装饰者模式。
 *         
 *         装饰者模式最重要的一点，装饰类需要继承被装饰类，这个继承不是为了继承被装饰
 *         类的行为，而是为了有一个被装饰者类型。
 */
public abstract class JianBing {
	
	/**
	 * 这个煎饼多少钱
	 * 
	 * @return 价格
	 */
	public abstract float cost();

}
